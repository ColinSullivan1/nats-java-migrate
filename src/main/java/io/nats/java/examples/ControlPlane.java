// Copyright 2020 Colin Sullivan
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package io.nats.java.examples;

import java.nio.charset.StandardCharsets;
import java.time.Duration;

import io.nats.client.Connection;
import io.nats.client.Dispatcher;
import io.nats.client.Message;
import io.nats.client.MessageHandler;

public class ControlPlane {
    String tag;
    MigrationHandler h;
    Dispatcher d;
    ControlMigrationHandler cmh = new ControlMigrationHandler();

    public interface MigrationHandler {

        // migrates current connection to the specified url
        // Return the new connection so the control plane can
        // resubscribe.
        public Connection migrate(String url) throws Exception;

        // handles fatal errors generated by the migration process.
        public void errorHandler(Exception e);
    }

    // This is a migration handler; add additional handlers as necessary.
    private class ControlMigrationHandler implements MessageHandler {

        @Override
        public void onMessage(Message msg) throws InterruptedException {
            Connection nc = null;
            byte[] data = msg.getData();
            String url = (data.length == 0) ? "nats://localhost:4222" :  new String(data, StandardCharsets.UTF_8);
            System.out.println("Migrate control message: " + tag + " migrating to " + url + ".");
    
            try {
                nc = h.migrate(url);
                setupMessageHandling(nc);
                attemptReply(nc, msg, "+OK");
            }
            catch (Exception e) {
                h.errorHandler(e);
                attemptReply(nc, msg, "+ERR " + e.getMessage());
            }
        }
    }

    private void setupMessageHandling(Connection c) throws Exception {
        // use one dispatcher and filter on subjects as an easy way to single
        // thread handling of commands..
        try {
            d = c.createDispatcher(cmh);
            d.subscribe("control.migrate." + tag);
            c.flush(Duration.ofSeconds(2));
        } catch (Exception e) {
            h.errorHandler(e);
        }       
    }

    public ControlPlane(Connection connection, MigrationHandler handler, String applicationTag) throws Exception {
        h = handler;
        tag = applicationTag;
        cmh = new ControlMigrationHandler();
        setupMessageHandling(connection);
    }

    private static void attemptReply(Connection c, Message ctrlMsg, String reply) {
        if (c == null || ctrlMsg == null || reply == null) {
            return;
        }
        try {
            c.publish(ctrlMsg.getReplyTo(), reply.getBytes(StandardCharsets.UTF_8));
            c.flush(Duration.ofSeconds(5));
        } catch (Exception e) {
            System.out.println("Error replying:  " + e.getMessage());
        }
    }
}